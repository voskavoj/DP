import matplotlib.pyplot as plt

_CHANNEL_SPACING = (1 / 3) * 10e5 / 8
_DUPLEX_FREQS = [round(1616000000 + _CHANNEL_SPACING / 2 + _CHANNEL_SPACING * i) for i in range(240)]
_SIMPLEX_FREQ = [1626104200, 1626145800, 1626270800, 1626395800, 1626437500]
CHANNEL_FREQS = _DUPLEX_FREQS + _SIMPLEX_FREQ

CHANNEL_IDS = {ch: v for v, ch in enumerate(_DUPLEX_FREQS)}
_SIMPLEX_IDS = ["P1", "P2", "RA", "P3", "P4"]
_SIMPLEX_IDS = [300, 310, 320, 330, 340]
CHANNEL_IDS.update({ch: v for ch, v in zip(_SIMPLEX_FREQ, _SIMPLEX_IDS)})


def find_tx_base_frequency(freq):
    base_freq = min(CHANNEL_FREQS, key=lambda x: abs(x - freq))
    if abs(base_freq - freq) > _CHANNEL_SPACING:
        print(f"WARNING: Frequency {freq} is outside of channel spacing for channel {CHANNEL_IDS[base_freq]} "
              f"by {round((abs(base_freq - freq) - _CHANNEL_SPACING) * 1e-3, 1)} kHz")
    return base_freq


def find_doppler_shift(freq):
    base_freq = find_tx_base_frequency(freq)
    return freq - base_freq


if __name__ == "__main__":

    test_freqs = [
        1626450816,
        1626283776,
        1626116480,
        1626283136,
        1626148480,
        1626115584,
        1626148480,
        1626315008,
        1626148352,
        1626148224,
        1626148224,
        1626148224,
        1626148224,
        1626148224,
        1626082688,
        1626481664,
        1626481536,
        1626481536,
        1626481664,
        1626148224,
        1626481536,
        1626481536,
        1626481536,
        1626148096,
        1626481536,
        1626481664,
        1625064832,
        1626481536,
        1626481664,
        1626481664,
        1625064832,
        1626481536,
        1626148096,
        1625231488,
        1626481536,
        1625064832,
        1626481536,
        1625231488,
        1625564800,
        1626481536,
        1625064832,
        1624939776,
        1625064832,
        1625064832,
        1624939776,
        1626148096,
        1626481408,
        1625064704,
        1625231488,
        1625564800,
        1624939776,
        1625564800,
        1625064832,
        1624939648,
        1625064832,
        1625064832,
        1625564928,
        1625231616,
        1624939648,
        1625564800,
        1625064704,
        1624939776,
        1625064832,
        1624939648,
        1624856448,
        1625564800,
        1625231232,
        1625064704,
        1624856448,
        1624814720,
        1625564800,
        1625231360,
        1625064832,
        1626148224,
        1624856448,
        1625231360,
        1625564800,
        1624856192,
        1624814720,
        1625231360,
        1625564800,
        1625231488,
        1625564800,
        1625231488,
        1625314688,
        1625564800,
        1625231360,
        1625314560,
        1625231360,
        1625564544,
        1626148096,
        1625064704,
        1625314560,
        1625231232,
        1625064704,
        1625231360,
        1625564928,
        1625064704,
        1626148096,
        1625231360,
        1625231488,
        1624939648,
        1625064704,
        1625314560,
        1625321216,
        1624939648,
        1625231232,
        1625564800,
        1625064704,
        1625231360,
        1625564672,
        1625064704,
        1625231360,
        1625564544,
        1626147968,
        1625231232,
        1625564544,
        1625106176,
        1625064704,
        1625231232,
        1625564672,
        1625101952,
        1625106176,
        1625064576,
        1625231232,
        1625564544,
        1625064576,
        1625105664,
        1625231360,
        1625564672,
        1626147968,
        1626481152,
        1626481280,
        1625564544,
        1625231232,
        1626481152,
        1625231360,
        1625064576,
        1626481152,
        1625231232,
        1625564672,
        1626147968,
        1626481280,
        1625564544,
        1625231104,
        1626481152,
        1625231232,
        1625564544,
        1626147968,
        1624939392,
        1624939520,
        1625564544,
        1625231232,
        1624939392,
        1625231232,
        1625564544,
        1624939520,
        1625564416,
        1625231232,
        1625814528,
        1624939392,
        1625064448,
        1625564544,
        1625231232,
        1624939392,
        1624939520,
        1625314432,
        1624939520,
        1625564544,
        1625231232,
        1625314432,
        1625564416,
        1625231360,
        1624939520,
        1626147840,
        1625314432,
        1625231232,
        1624939392,
        1624939392,
        1625231104,
        1625564544,
        1625106176,
        1624939392,
        1625106048,
        1625231104,
        1625564288,
        1625106048,
        1625814528,
        1625106048,
        1625897856,
        1625064576,
        1624939392,
        1625106176,
        1625564288,
        1625231232,
        1626147840,
        1625106176,
        1625231232,
        1625564416,
        1625064448,
        1625106048,
        1625106048,
        1625064448,
        1625231104,
        1625564544,
        1625106176,
        1625897728,
        1626314368,
        1626147712,
        1624939392,
        1625106048,
        1625564288,
        1625231104,
        1625064448,
        1625106048,
        1626314368,
        1625064320,
        1625106048,
        1625064320,
        1625105920,
        1625231104,
        1625564416,
        1626147712,
        1625106048,
        1626480768,
        1626480640,
        1626445184,
        1626480512
    ]

    base_freqs = [find_tx_base_frequency(f) for f in test_freqs]
    channel_ids = [CHANNEL_IDS[f] for f in base_freqs]
    doppler_shifts = [find_doppler_shift(f) for f in test_freqs]
    relative_doppler_shifts = [f / bf for f, bf in zip(doppler_shifts, base_freqs)]


    print(set(channel_ids))
    print(set(doppler_shifts))
    print(set(relative_doppler_shifts))

    # plt.plot(relative_doppler_shifts, 'o', c=channel_ids, cmap="summer")
    plt.plot(channel_ids, relative_doppler_shifts, 'o')
    plt.show()


